/**
 * MOCK ROUTES FOR TESTING
 * 
 * Instructions:
 * 1. Rename this file to routes.ts to use the mock routes
 * 2. Note: This is for testing only and won't persist data
 */

import express, { type Request, Response } from "express";
import { Server, createServer } from "http";

// Mock user data
const MOCK_USER = {
  id: 1,
  username: "testuser",
  level: 5,
  experience: 750,
  coins: 100,
  avatarId: "default",
  createdAt: new Date(),
  lastLoginAt: new Date(),
  stats: {
    questionsAnswered: 42,
    correctAnswers: 36,
    highestStreak: 8,
    topicsExpertise: {
      "Network Security": 4,
      "Web Security": 3,
      "Cryptography": 2
    }
  }
};

// Mock questions data
const MOCK_QUESTIONS = [
  {
    id: "q1",
    question: "What is the most common type of attack that involves sending deceptive emails?",
    options: ["Phishing", "DDoS", "SQL Injection", "Cross-site Scripting"],
    correctOption: 0,
    explanation: "Phishing is a type of social engineering attack that involves sending fraudulent messages that appear to come from a trusted source.",
    difficulty: "beginner",
    topic: "Social Engineering",
    points: 10
  },
  {
    id: "q2",
    question: "Which encryption algorithm is considered outdated and insecure?",
    options: ["AES-256", "RSA-2048", "MD5", "Blowfish"],
    correctOption: 2,
    explanation: "MD5 is a cryptographic hash function that is now considered cryptographically broken and unsuitable for further use.",
    difficulty: "intermediate",
    topic: "Cryptography",
    points: 15
  },
  {
    id: "q3",
    question: "What type of attack floods a network with traffic to make a service unavailable?",
    options: ["Man-in-the-Middle", "DDoS", "SQL Injection", "Zero-day Exploit"],
    correctOption: 1,
    explanation: "A Distributed Denial of Service (DDoS) attack attempts to make a service unavailable by overwhelming it with traffic from multiple sources.",
    difficulty: "beginner",
    topic: "Network Security",
    points: 10
  }
];

// Mock lifelines data
const MOCK_LIFELINES = {
  fiftyFifty: 3,
  askExpert: 2,
  lastRefreshedAt: new Date()
};

export async function registerRoutes(app: express.Express): Promise<Server> {
  // Create an HTTP server for the Express app
  const server = createServer(app);

  // Auth routes
  app.post("/api/auth/register", (req: Request, res: Response) => {
    const { username, password } = req.body;
    if (!username || !password) {
      return res.status(400).json({ message: "Username and password are required" });
    }
    
    // Mock registration
    return res.status(201).json({ message: "User registered successfully" });
  });

  app.post("/api/auth/login", (req: Request, res: Response) => {
    const { username, password } = req.body;
    if (!username || !password) {
      return res.status(400).json({ message: "Username and password are required" });
    }
    
    // Mock login
    req.session.userId = 1;
    return res.status(200).json({ user: MOCK_USER });
  });

  app.post("/api/auth/logout", (req: Request, res: Response) => {
    req.session.destroy(() => {});
    return res.status(200).json({ message: "Logged out successfully" });
  });

  // User routes
  app.get("/api/user/profile", (req: Request, res: Response) => {
    // Check if user is logged in
    if (!req.session.userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    return res.status(200).json(MOCK_USER);
  });

  app.get("/api/user/lifelines", (req: Request, res: Response) => {
    // Check if user is logged in
    if (!req.session.userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    return res.status(200).json(MOCK_LIFELINES);
  });

  // Game routes
  app.get("/api/game/questions", (req: Request, res: Response) => {
    const { difficulty, topic, limit } = req.query;
    // Return filtered questions based on query params
    return res.status(200).json(MOCK_QUESTIONS);
  });

  app.post("/api/game/answer", (req: Request, res: Response) => {
    const { questionId, answer } = req.body;
    if (!questionId || answer === undefined) {
      return res.status(400).json({ message: "Question ID and answer are required" });
    }
    
    // Find the question
    const question = MOCK_QUESTIONS.find(q => q.id === questionId);
    if (!question) {
      return res.status(404).json({ message: "Question not found" });
    }
    
    // Check if answer is correct
    const isCorrect = answer === question.correctOption;
    
    return res.status(200).json({
      correct: isCorrect,
      explanation: question.explanation,
      pointsEarned: isCorrect ? question.points : 0,
      rewards: isCorrect ? {
        experience: 10,
        coins: 5
      } : null
    });
  });

  return server;
} 